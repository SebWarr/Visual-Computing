<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Showcase Template</title><link>https://visualcomputing.github.io/Visual-Computing/</link><description>Recent content in Introduction on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/Visual-Computing/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://visualcomputing.github.io/Visual-Computing/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://visualcomputing.github.io/Visual-Computing/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://visualcomputing.github.io/Visual-Computing/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://visualcomputing.github.io/Visual-Computing/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/buttons/</guid><description> Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/columns/</guid><description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/details/</guid><description> Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip;</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/expand/</guid><description>Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example # Default # {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content # Lorem markdownum insigne&amp;hellip; With Custom Label # {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Custom Label ... Markdown content # Lorem markdownum insigne.</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/hints/</guid><description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/tabs/</guid><description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/talleres/3D-brush/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/talleres/3D-brush/</guid><description>3D Brush # Introducción # En esta implementación de el Pincel en 3D (3D Brush), se utiliza un control remoto de un Nintendo Wii (Wiimote) para el control del dibujo y movimiento del plano. Esto se suma al uso de TreeGL y EasyCAM.
El Control Remoto # El Wiimote es el control remoto de la Consola Nintendo Wii (2006 - 2017); utiliza tecnología Bluetooth para la conexión con el Wii y con otros dispositivos.</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/talleres/rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/talleres/rasterization/</guid><description>Rasterización # Introducción # La técnica de renderizado por rasterización es, con cierta certeza, la técnica más popular para producir gráficos de computadora en 3D en tiempo real, sin embargo, es probablemente la técnica que menos se entiende y menos se documentada de todas las demás familiarizadas, en especial si se pone a discusión, la técnica de ray-tracing.
Dicha &amp;ldquo;segregación&amp;rdquo; se debe a varios factores, por ejemplo, la rasterización es una &amp;ldquo;técnica del pasado&amp;rdquo;, pero para nada una técnica obsoleta ya que las técnicas utilizadas para producir una imagen implementando este algoritmo tomaron fuerza entre los años 60 y principios de los 80.</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/talleres/shaders_excercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/talleres/shaders_excercises/</guid><description>Shaders # UV Visualization # uv.js uv.frag precision mediump float; // the texture coordinates varying was defined in // the vertex shader by treegl readShader() // open your console and &amp;amp; see! varying vec2 texcoords2; void main() { // glsl swizzling is both handy and elegant // see: https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Swizzling gl_FragColor = vec4(texcoords2.xy, 0.0, 1.0); } Texture sampling # luma.js let lumaShader; let img; let grey_scale; function preload() { lumaShader = readShader(&amp;#39;/Visual-Computing/sketches/shaders/luma.</description></item><item><title/><link>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/talleres/watercolor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/Visual-Computing/docs/shortcodes/talleres/watercolor/</guid><description>Watercolor illusion # Introducción # La ilusión de acuarela (watercolor illusion) es una dispersión asimilativa de color de largo alcance que emana de un contorno de color delgado yuxtapuesto a un contorno cromático más oscuro y que imparte efectos de figura-fondo y objeto-agujero en un área grande
El efecto o ilusión acuarela nos ofrece dos fenómenos notables: primero, una &amp;ldquo;difusión&amp;rdquo; de largo alcance de un color pálido desde uno o más contornos de colores brillantes en el espacio circundante; en segundo lugar, hay un efecto pronunciado de figura-fondo, en el que ciertos elementos se perciben como si tuvieran una forma definida mientras que otros se percibirán como un fondo sin forma que está siendo ocluido por la figura.</description></item></channel></rss>